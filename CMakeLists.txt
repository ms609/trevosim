cmake_minimum_required(VERSION 3.16)

set(TREVOSIM_VERSION 3.0.0)
set(TREVOSIM_APP TREvoSim)
set(TREVOSIM_UNIT_TEST TREvoSimTest)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# Set the macOS binary to both intel and arm
set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64" CACHE STRING "" FORCE)

#TREvoSim
project(${TREVOSIM_APP} VERSION ${TREVOSIM_VERSION} LANGUAGES CXX)

# Download and unpack googletest at configure time
configure_file(CMakeGoogleTest.txt GoogleTest/CMakeLists.txt)
execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/GoogleTest"
)
execute_process(COMMAND "${CMAKE_COMMAND}" --build .
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/GoogleTest"
)

# Prevent GoogleTest from overriding our compiler/linker options
# when building with Visual Studio
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This adds the following targets:
# gtest, gtest_main, gmock and gmock_main
add_subdirectory("${CMAKE_BINARY_DIR}/googletest-src"
                 "${CMAKE_BINARY_DIR}/googletest-build"
)

include_directories("${gtest_SOURCE_DIR}/include"
                    "${gmock_SOURCE_DIR}/include"
)

# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
set(MACOSX_BUNDLE_ICON_FILE icon.icns)
# And the following tells CMake where to find and install the file itself.
set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/icon.icns")
set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

# Set the icon for Windows
set(app_icon_resource_windows "${CMAKE_CURRENT_SOURCE_DIR}/resources/trevosim.rc")

# Add QT required components
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Concurrent Core5Compat)

# Do a custom QT cmake setup if > 6.3.0
if (Qt6_VERSION VERSION_GREATER 6.3.0)
    qt_standard_project_setup()
endif()

# This defines ALL the source files EXCEPT main.cpp and testsuite.h/cpp.
# The main.cpp is not included here as the GoogleTest framework has its own main.
# The testsuite.h/cpp files are not included as they are only for the TREvoSimTest executable.
set(app_sources
    version.h
    batchdialog.cpp batchdialog.h
    mainwindow.cpp mainwindow.h
    organism.cpp organism.h
    settings.cpp settings.h
    simulation.cpp simulation.h
    simulation_variables.cpp simulation_variables.h
    output.cpp output.h
    about.cpp about.h
    darkstyletheme.cpp darkstyletheme.h
    testinternal.cpp testinternal.h
    .astylerc
)

set( UI
    about.ui  batchdialog.ui  mainwindow.ui  output.ui  settings.ui
)


# Defines the main TREvoSim executable
qt_add_executable(${TREVOSIM_APP}
    main.cpp
    ${app_sources}
    ${UI}
    ${app_icon_macos}
    ${app_icon_resource_windows}
    resources.qrc
)

# Links the required QT libs to the main TREvoSim executable
target_link_libraries(${TREVOSIM_APP} PRIVATE Qt6::Core Qt::Gui Qt::Widgets Qt6::Concurrent Qt::Core5Compat)

# Set the target properites for the main TREvoSim executable
set_target_properties(${TREVOSIM_APP} PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)

# Sets up the deployment install via cmake for the main TREvoSim executable
install(TARGETS ${TREVOSIM_APP}
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
if (Qt6_VERSION VERSION_GREATER 6.5.0)
    qt_generate_deploy_app_script(
        TARGET ${TREVOSIM_APP}
        OUTPUT_SCRIPT deploy_script
        NO_UNSUPPORTED_PLATFORM_ERROR
    )

    install(SCRIPT ${deploy_script})
endif()

# GoogleTest building for TREvoSimTest
project(${TREVOSIM_UNIT_TEST} VERSION ${TREVOSIM_VERSION} LANGUAGES CXX)

enable_testing()

add_compile_definitions(${TREVOSIM_UNIT_TEST} PRIVATE UNIT_TEST_BUILD=1)

add_executable(${TREVOSIM_UNIT_TEST}
    ${app_sources}
    testsuite.h testsuite.cpp
)
target_link_libraries(${TREVOSIM_UNIT_TEST} PRIVATE GTest::gtest_main Qt6::Core Qt::Gui Qt::Widgets Qt6::Concurrent Qt::Core5Compat)

set_target_properties(${TREVOSIM_UNIT_TEST} PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)

include(GoogleTest)
gtest_discover_tests(${TREVOSIM_UNIT_TEST})

# Add the GoogleTest built program as a CTest
add_test(
    NAME ${TREVOSIM_UNIT_TEST}
    COMMAND ${TREVOSIM_UNIT_TEST}
)

# Run the test progam post build
add_custom_command(
     TARGET ${TREVOSIM_UNIT_TEST}
     POST_BUILD
     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
     COMMAND ${CMAKE_CTEST_COMMAND} -C $<CONFIGURATION> -R "^${TREVOSIM_UNIT_TEST}$" --output-on-failures -v
)

